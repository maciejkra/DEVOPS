pipeline {
    agent any

    environment {
        REGISTRY = "krajewskim/python-api"
        KUBECTL_NAMESPACE = "jenkins-deploy"
        CI_APP_NAME = "python-deployment"
        DOCKERHUB_CRED = credentials('dockerhub')
    }

    stages {

        stage('Build Docker Image') {
            steps {
                dir('03_DOCKER/10_python/') {
                    script {
                        // Logowanie do DockerHub
                        sh 'echo "$DOCKERHUB_CRED_PSW" | docker login -u "$DOCKERHUB_CRED_USR" --password-stdin'
                        // Enable experimental features (if needed)
                        sh 'docker buildx create --use --name multiarch-builder || true'

                        // Build for multiple architectures
                        sh """
                            docker buildx build \
                                --platform linux/amd64,linux/arm64 \
                                -t ${REGISTRY}:latest \
                                -f Dockerfile.solution \
                                --push \
                                .
                        """
                    }
                }
            }
        }

        stage('Clean Up Local Docker Image') {
            steps {
                sh "docker rmi ${REGISTRY} || true"
            }
        }

        stage('Deploy to Kubernetes') {
            agent {
                docker {
                    image 'krajewskim/kubectl'
                    args '-v /tmp:/tmp --entrypoint='
                }
            }
            steps {
                script {
                    withKubeConfig(credentialsId: 'docker-for-desktop', namespace: "${KUBECTL_NAMESPACE}") {

                        sh """
                            kubectl create namespace ${KUBECTL_NAMESPACE} --dry-run=client -o yaml | kubectl apply -f -
                            kubectl config set-context \$(kubectl config current-context) --namespace=${KUBECTL_NAMESPACE}
                        """

                        sh 'kubeval --strict 04_KUBERNETES/04_service/solution/*'

                        try {
                            sh 'kubectl apply -f 04_KUBERNETES/04_service/solution/'
                            sh "kubectl rollout status deployment ${CI_APP_NAME} --timeout=60s"
                            echo '‚úÖ Rollout completed successfully.'
                        } catch (err) {
                            echo '‚ùå Rollout failed. Attempting rollback...'
                            sh "kubectl rollout undo deployment ${CI_APP_NAME} || true"
                            sh "kubectl rollout status deployment ${CI_APP_NAME}"
                            error("Deployment failed and was rolled back.")
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo 'üö® Pipeline failed. Please check logs.'
        }
        success {
            echo 'üéâ Pipeline completed successfully.'
        }
    }
}
